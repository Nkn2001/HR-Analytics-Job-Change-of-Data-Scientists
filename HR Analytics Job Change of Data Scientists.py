# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V5SYR16i0U2hLe2XPEkHWbs5dva_WXGj

## 0. Import Libraries
"""

import pandas as pd

!pip install pymysql

from sqlalchemy import create_engine
import pymysql

"""## 1. Extrac Data

### 1.1 Enrollies' data
"""

google_sheet_id = '1VCkHwBjJGRJ21asd9pxW4_0z2PWuKhbLR3gUHm-p4GI'
url = 'https://docs.google.com/spreadsheets/d/' + google_sheet_id + '/export?format=xlsx'
enrollies_data = pd.read_excel(url, sheet_name='enrollies')

enrollies_data.head()

"""### 1.2 Enrollies' education"""

import requests
excel_url = 'https://drive.google.com/drive/u/0/folders/1CIwCOHtn1ZYRb2BhC-UtmCToSykpkuhw'
excel_response = requests.get(excel_url)
with open('enrollies_education.xlsx', 'wb') as file:
    file.write(excel_response.content)

enrollies_education.head()

"""### 1.3 Enrollies' working experience"""

import requests
csv_url = 'https://drive.google.com/drive/u/0/folders/1CIwCOHtn1ZYRb2BhC-UtmCToSykpkuhw'
csv_response = requests.get(csv_url)
with open('work_experience.csv', 'wb') as file:
    file.write(csv_response.content)

work_experience.head()

"""### 1.4 Training hours"""

enegine = create_engine('mysql+pymysql://etl_practice:550814@112.213.86.31:3360/company_course')

enegine = create_engine('mysql+pymysql://etl_practice:550814@112.213.86.31:3360/company_course')
training_hours = pd.read_sql_table('training_hours', enegine)

training_hours.head()

"""### 1.5 City development index"""

tables = pd.read_html('https://sca-programming-school.github.io/city_development_index/index.html')
city = tables[0]

city.head()

"""### 1.6 Employment"""

employment = pd.read_sql_table('employment', enegine)

employment.head()

"""## 2. Tranform Data

### 2.1 Enrollies' data
"""

enrollies_data.info()

"""#### Fix data type"""

enrollies_data['full_name'] = enrollies_data['full_name'].astype('string')
enrollies_data['gender'] = enrollies_data['gender'].astype('string')

enrollies_data['city'] = enrollies_data['city'].astype('category')
enrollies_data['gender'] = enrollies_data['gender'].astype('string')

"""##### Fill missing values

"""

gender_mode = enrollies_data['gender'].mode()[0]
enrollies_data['gender'].fillna(gender_mode, inplace=True)

enrollies_data.info()

"""### 2.2 Enrollies' education"""

enrollies_education.info()

"""#### Fix Data type"""

enrollies_education['enrolled_university'] = enrollies_education['enrolled_university'].astype('string')

enrollies_education['education_level'] = enrollies_education['education_level'].astype('string')

enrollies_education['major_discipline'] = enrollies_education['major_discipline'].astype('string')

"""##### Fill Missing Values"""

enrolled_university_mode = enrollies_education['enrolled_university'].mode()[0]
enrollies_education['enrolled_university'].fillna(enrolled_university_mode, inplace=True)

education_level_mode = enrollies_education['education_level'].mode()[0]
enrollies_education['education_level'].fillna(education_level_mode, inplace=True)

major_discipline_mode = enrollies_education['major_discipline'].mode()[0]
enrollies_education['major_discipline'].fillna(major_discipline_mode, inplace=True)

enrollies_education.info()

"""### 2.3 Enrollies' working experience"""

work_experience.info()

"""#### Fix Data Type"""

work_experience['experience'] = work_experience['experience'].astype('string')

"""##### Fill missing values"""

work_experience_mode = work_experience['experience'].mode()[0]
work_experience['experience'].fillna(work_experience_mode, inplace=True)

work_experience.info()

"""### 2.4 Training Hour

"""

training_hours.info()

"""### 2.5 City Development Index"""

city.info()

"""### 2.6 Employment"""

employment.info()

"""## 3. Load Data"""

db_path = 'data_warehouse.db'
engine = create_engine(f'sqlite:///{db_path}')

tables = [
    ('dim_enrollies_data', enrollies_data),
    ('fact_enrollies_education', enrollies_education),
    ('dim_work_experience', work_experience),
    ('dim_traning_hours', training_hours),
    ('dim_city', city),
    ('fact_employment', employment)
]

for table_name, dataframe in tables:
    dataframe.to_sql(table_name, engine, if_exists='replace', index=False)